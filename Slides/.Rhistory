confidenceInterval
n <- 4
x <- 3
test <- binom.test(x=x, n=n, alt="greater")
round(test$p.value,2)
rate <- 1/100
errors <- 10
days <- 1787
test <-  poisson.test(errors, T = days, r = rate, alt="less")
round(test$p.value,2)
n <- 100 #subject
μ <- 0.01# m^3 brain volume loss mean
σ <- 0.04# m^3 brain volume loss std. dev.
p <- 0.05 # sign level
pow <- power.t.test(n=n, delta=μ, sd=σ , sig.level=p, type="one.sample", alt="one.sided")$power
round(pow, 2)
#8
μ <- 0.01# m^3 brain volume loss mean
σ <- 0.04# m^3 brain volume loss std. dev.
p <- 0.05 # sign level
pow <- 0.9 #power
n <- power.t.test(power=pow, delta=μ, sd=σ , sig.level=p, type="one.sample", alt="one.sided")$n
ceiling(n/10)*10
geom_density(colour="blue", size=1)
ggplot(data = simulated_means, aes(x = means)) +
geom_density(colour="green") +
stat_function(fun = dnorm, arg = list(mean = theoretical_mu , sd = sqrt(theoretical_variance)), colour = "red") +
geom_vline(xintercept = theoretical_mu, colour="red") +
stat_function(fun = dnorm, arg = list(mean = simulated_mu , sd = sqrt(simulated_variance)), colour = "blue") +
geom_vline(xintercept = simulated_mu, colour="blue") +
scale_colour_manual(name="Legend", values = c("a" = "black", "b" = "red", "c" = "blue")) +
scale_linetype_manual(name="Legend", values = c("a" = "dashed", "b" = "dotted", "c" = "dotted")) +
theme(legend.position = "bottom") +
scale_color_manual(name = "Year", # or name = element_blank()
labels = c(1940, 1960),
values = colors)
library(ggplot2)
ggplot(data = simulated_means, aes(x = means)) +
geom_density(colour="green") +
stat_function(fun = dnorm, arg = list(mean = theoretical_mu , sd = sqrt(theoretical_variance)), colour = "red") +
geom_vline(xintercept = theoretical_mu, colour="red") +
stat_function(fun = dnorm, arg = list(mean = simulated_mu , sd = sqrt(simulated_variance)), colour = "blue") +
geom_vline(xintercept = simulated_mu, colour="blue") +
scale_colour_manual(name="Legend", values = c("a" = "black", "b" = "red", "c" = "blue")) +
scale_linetype_manual(name="Legend", values = c("a" = "dashed", "b" = "dotted", "c" = "dotted")) +
theme(legend.position = "bottom") +
scale_color_manual(name = "Year", # or name = element_blank()
labels = c(1940, 1960),
values = colors)
library(ggplot2)
set.seed(10151)
```
In the first step we will create a 1000 test populated with 40 exponential samples each one. In another way we are building a matrix with 1000 rows and 40 columns filled with data extracted with a exponential distribution with parameter lamba = 0.2. The exponential distribution can be simulated in R with rexp(n, lambda) where lambda is the rate parameter.
```{r}
# Set simulation constants:
lambda <- 0.2
n      <- 40
n_test <- 1000
# Generate a n x n_test matrix
simulated_distributions <- matrix(data = rexp(n * n_test, lambda), nrow = n_test)
```
We can calculate our staticstic (mean) for each row, the result is a new matrix with 1000 row and 1 column.
```{r}
# Calculate means
simulated_means <- data.frame(means=apply(simulated_distributions, 1, mean))
```
If we plot the histogram of density of the means we obtain the following chart.
```{r echo=FALSE}
# Plot the means
ggplot(data = simulated_means, aes(x = means)) +
geom_histogram(aes(y = ..density..), color="black", fill="lightblue")
```
# Sample Mean versus Theoretical Mean
As we know from theory the mean of exponential distribution is 1/lambda, the sample mean we can calculate using the `mean()` function in R.
```{r}
# Calculate means
theoretical_mu <- 1/lambda
theoretical_mu
simulated_mu <- mean(simulated_means$means)
simulated_mu
```
Theoretical mean had value `r theoretical_mu`, sample mean has value  `r simulated_mu` so the difference is only `r theoretical_mu - simulated_mu`.
# Sample Variance versus Theoretical Variance
As we know from theory the variance of exponential distribution is 1/lambda, the sample variance we can calculate using the `var()` function in R.
```{r}
# Calculate variance
theoretical_variance <- 1/((lambda^2)*n)
theoretical_variance
simulated_variance <- var(simulated_means$means)
simulated_variance
```
Theoretical variance had value `r theoretical_variance`, sample variance has value  `r simulated_variance` so the difference is only `r theoretical_variance - simulated_variance`.
# Distribution
Via figures and text, explain how one can tell the distribution is approximately normal.
```{r echo=FALSE}
# Plot the means
ggplot(data = simulated_means, aes(x = means)) +
geom_density(colour="green") +
stat_function(fun = dnorm, arg = list(mean = theoretical_mu , sd = sqrt(theoretical_variance)), colour = "red") +
geom_vline(xintercept = theoretical_mu, colour="red") +
stat_function(fun = dnorm, arg = list(mean = simulated_mu , sd = sqrt(simulated_variance)), colour = "blue") +
geom_vline(xintercept = simulated_mu, colour="blue") +
scale_colour_manual(name="Legend", values = c("a" = "black", "b" = "red", "c" = "blue")) +
scale_linetype_manual(name="Legend", values = c("a" = "dashed", "b" = "dotted", "c" = "dotted")) +
theme(legend.position = "bottom") +
scale_color_manual(name = "Year", # or name = element_blank()
labels = c(1940, 1960),
values = colors)
ggplot(data = simulated_means, aes(x = means)) +
geom_histogram(aes(y = ..density..), color="black", fill="lightblue") +
geom_density(colour="green") +
stat_function(fun = dnorm, arg = list(mean = theoretical_mu , sd = sqrt(theoretical_variance)), colour="red") +
geom_vline(xintercept = theoretical_mu, colour="red") +
stat_function(fun = dnorm, arg = list(mean = simulated_mu , sd = sqrt(simulated_variance)), colour = "blue") +
geom_vline(xintercept = simulated_mu, colour="blue")
ggplot(data = simulated_means, aes(x = means)) +
geom_histogram(aes(y = ..density..), aes(color="black"), fill="lightblue") +
geom_density(colour="green") +
stat_function(fun = dnorm, arg = list(mean = theoretical_mu , sd = sqrt(theoretical_variance)), colour="red") +
geom_vline(xintercept = theoretical_mu, colour="red") +
stat_function(fun = dnorm, arg = list(mean = simulated_mu , sd = sqrt(simulated_variance)), colour = "blue") +
geom_vline(xintercept = simulated_mu, colour="blue")
ggplot(data = simulated_means, aes(x = means)) +
geom_histogram(aes(y = ..density..), aes(color="black"), fill="lightblue")
ggplot(data = simulated_means, aes(x = means)) +
geom_histogram(aes(y = ..density.., color="black"), color="black", fill="lightblue") +
geom_density(colour="green") +
stat_function(fun = dnorm, arg = list(mean = theoretical_mu , sd = sqrt(theoretical_variance)), colour="red") +
geom_vline(xintercept = theoretical_mu, colour="red") +
stat_function(fun = dnorm, arg = list(mean = simulated_mu , sd = sqrt(simulated_variance)), colour = "blue") +
geom_vline(xintercept = simulated_mu, colour="blue")
ggplot(data = simulated_means, aes(x = means)) +
geom_histogram(aes(y = ..density.., color="black"), color="black", fill="lightblue") +
geom_density(colour="green") +
stat_function(fun = dnorm, arg = list(mean = theoretical_mu , sd = sqrt(theoretical_variance)), colour="red") +
geom_vline(xintercept = theoretical_mu, colour="red") +
stat_function(fun = dnorm, arg = list(mean = simulated_mu , sd = sqrt(simulated_variance)), colour = "blue") +
geom_vline(xintercept = simulated_mu, colour="blue") +
theme(legend.position="top")
---
theme(legend.position="bottom", legend.text=element_text(size=10) )
ggplot(data = simulated_means, aes(x = means)) +
library(datasets)
library(ggplot2)
library(datasets)
library(ggplot2)
ggplot(data=ToothGrowth, aes(x=as.factor(dose), y=len, fill=supp)) +
geom_bar(stat="identity",) +
facet_grid(. ~ supp) +
xlab("Dose in miligrams") +
ylab("Tooth length") +
guides(fill=guide_legend(title="Supplement type"))
ToothGrowth
ggplot(data, aes(x = dose, y = len)) + geom_boxplot(aes(fill = dose))
ggplot(data, aes(x = as.factor(dose), y = len)) + geom_boxplot(aes(fill = as.factor(dose)))
data <- ToothGrowth
data$dose <- factor(data$dose)
levels(data$supp) <- c("Orange Juice", "Ascorbic Acid")
str(data)
summary(data)
# Dosage testing: 0.5 mg vs 1 mg.
data_05_1 <- subset(data, dose %in% c(0.5,1))
t.test(len ~ dose, paired=F, var.equal=F, data=data_05_1)
# Dosage testing: 1 mg vs 2 mg.
data_1_2 <- subset(data, dose %in% c(1,2))
t.test(len ~ dose, paired=F, var.equal=F, data=data_1_2)
# Delivery method testing
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==0.5,])
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==1,])
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==2,])
t.test(len ~ supp, paired=F, var.equal=F, data=data)
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==0.5,])
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==1,])
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==2,])
t.test(len ~ supp, paired=F, var.equal=F, data=data)
?ToothGrowth
View(data_1_2)
View(data_05_1)
View(data)
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
library(datasets)
library(ggplot2)
#ToothGrowth$supp <- factor(ToothGrowth$supp)
levels(ToothGrowth$supp) <- c("Orange Juice", "Ascorbic Acid")
ToothGrowth$dose <- factor(ToothGrowth$dose)
ggplot(data=ToothGrowth, aes(x=dose, y=len, fill=supp)) +
geom_bar(stat="identity",) +
facet_grid(. ~ supp) +
labs(title="Means Histogram", x="Dose [mg]", y="Tooth length")
guides(fill=guide_legend(title="Supplement type"))
str(data)
summary(data)
# Dosage testing: 0.5 mg vs 1 mg.
data_05_1 <- subset(ToothGrowth, dose %in% c(0.5,1))
t.test(len ~ dose, paired=F, var.equal=F, data=data_05_1)
# Dosage testing: 1 mg vs 2 mg.
data_1_2 <- subset(ToothGrowth, dose %in% c(1,2))
t.test(len ~ dose, paired=F, var.equal=F, data=data_1_2)
# Delivery method testing
t.test(len ~ supp, paired=F, var.equal=F, data=ToothGrowth[ToothGrowth$dose==0.5,])
t.test(len ~ supp, paired=F, var.equal=F, data=ToothGrowth[ToothGrowth$dose==1,])
t.test(len ~ supp, paired=F, var.equal=F, data=ToothGrowth[ToothGrowth$dose==2,])
t.test(len ~ supp, paired=F, var.equal=F, data=ToothGrowth)
```
library(datasets)
library(datasets)
library(ggplot2)
#ToothGrowth$supp <- factor(ToothGrowth$supp)
levels(ToothGrowth$supp) <- c("Orange Juice", "Ascorbic Acid")
ToothGrowth$dose <- factor(ToothGrowth$dose)
ggplot(data=ToothGrowth, aes(x=dose, y=len, fill=supp)) +
geom_bar(stat="identity",) +
facet_grid(. ~ supp) +
labs(title="Means Histogram", x="Dose [mg]", y="Tooth length")
guides(fill=guide_legend(title="Supplement type"))
# Dose transformation to factor and data peek:
str(data)
summary(data)
levels(ToothGrowth$supp)
library(datasets)
library(ggplot2)
#ToothGrowth$supp <- factor(ToothGrowth$supp)
library(datasets)
levels(ToothGrowth$supp)
library(datasets)
library(ggplot2)
#ToothGrowth$supp <- factor(ToothGrowth$supp)
levels(ToothGrowth$supp)
levels(ToothGrowth$supp) <- c("Orange Juice", "Ascorbic Acid")
ToothGrowth$dose <- factor(ToothGrowth$dose)
View(ToothGrowth)
ggplot(data=ToothGrowth, aes(x=dose, y=len, fill=supp)) +
geom_bar(stat="identity",) +
facet_grid(. ~ supp) +
labs(title="Means Histogram", x="Dose [mg]", y="Tooth length")+
guides(fill=guide_legend(title="Supplement type"))
boxplot(len ~ dose, data = ToothGrowth,
boxwex = 0.25, at = 1:3 - 0.2,
subset = supp == "VC", col = "yellow",
main = "Guinea Pigs' Tooth Growth",
xlab = "Vitamin C dose mg",
ylab = "tooth length",
xlim = c(0.5, 3.5), ylim = c(0, 35), yaxs = "i")
boxplot(len ~ dose, data = ToothGrowth, add = TRUE,
boxwex = 0.25, at = 1:3 + 0.2,
subset = supp == "OJ", col = "orange")
legend(2, 9, c("Ascorbic acid", "Orange juice"),
fill = c("yellow", "orange"))
boxplot(len ~ dose, data = ToothGrowth,
boxwex = 0.25, at = 1:3 - 0.2,
subset = supp == "Ascorbic Acid", col = "yellow",
main = "Guinea Pigs' Tooth Growth",
xlab = "Vitamin C dose mg",
ylab = "tooth length",
xlim = c(0.5, 3.5), ylim = c(0, 35), yaxs = "i")
boxplot(len ~ dose, data = ToothGrowth, add = TRUE,
boxwex = 0.25, at = 1:3 + 0.2,
subset = supp == "Orange Juice", col = "orange")
legend(2, 9, c("Ascorbic acid", "Orange juice"),
fill = c("yellow", "orange"))
ggplot(data=ToothGrowth, aes(x = supp, y = len)) +
ggtitle("ToothGrowth data: length vs dose, given type of supplement") +
labs(x = "supplement type", y = "tooth length (mm)") +
geom_boxplot(aes(fill = dose))
ggplot(data=ToothGrowth, aes(x = dose, y = len)) +
ggtitle("ToothGrowth data: length vs dose, given type of supplement") +
labs(x = "supplement type", y = "tooth length (mm)") +
geom_boxplot(aes(fill = dose))
geom_boxplot(aes(fill = supp))
ggplot(data=ToothGrowth, aes(x = dose, y = len)) +
ggtitle("ToothGrowth data: length vs dose, given type of supplement") +
labs(x = "supplement type", y = "tooth length (mm)") +
geom_boxplot(aes(fill = supp))
ggplot(data=ToothGrowth, aes(x = dose, y = len)) +
ggtitle("ToothGrowth data: length vs dose, given type of supplement") +
labs(x = "supplement type", y = "tooth length (mm)") +
geom_boxplot(aes(fill = supp)) +
facet_grid(. ~ supp)
ggplot(data=ToothGrowth, aes(x = dose, y = len)) +
ggtitle("ToothGrowth data: length vs dose, given type of supplement") +
labs(x = "supplement type", y = "tooth length (mm)") +
geom_boxplot(aes(fill = dose)) +
facet_grid(. ~ supp)
ggplot(data=ToothGrowth, aes(x = dose, y = len)) +
labs(title="ToothGrowth data", x="Dose [mg]", y = "Tooth length") +
geom_boxplot(aes(fill=dose)) +
facet_grid(. ~ supp) +
theme(legend.position="none")
ggplot(data=ToothGrowth, aes(x = dose, y = len)) +
labs(title="ToothGrowth data", x="Dose [mg]", y = "Tooth length") +
geom_boxplot(aes(fill=dose)) +
facet_grid(. ~ supp) +
geom_smooth(method = "lm", se=FALSE, color="black", formula=dose~len) +
theme(legend.position="none")
ggplot(data=ToothGrowth, aes(x = dose, y = len)) +
labs(title="ToothGrowth data", x="Dose [mg]", y = "Tooth length") +
geom_boxplot(aes(fill=dose)) +
facet_grid(. ~ supp) +
geom_smooth(method = "lm", se=FALSE, color="black", formula=ToothGrowth$dose~ToothGrowth$len) +
theme(legend.position="none")
ggplot(data=ToothGrowth, aes(x = dose, y = len)) +
labs(title="ToothGrowth data", x="Dose [mg]", y = "Tooth length") +
geom_boxplot(aes(fill=dose)) +
facet_grid(. ~ supp) +
geom_smooth(method = "lm", se=FALSE, color="black", aes(group=1)) +
theme(legend.position="none")
library(swirl)
swirl()
pt(q=2.5, df=15, lower.tail=FALSE)
qnorm(0.975)
qnorm(0.95)
qnorm(0.99)
pnorm(2)
pnorm(2 lower.tail = FALSE)
pnorm(2, lower.tail = FALSE)
mybin
pbinom(6, size=8, prob=.5, and lower.tail=FALSE)
pbinom(6, size=8, prob=.5, lower.tail=FALSE)
pbinom(7, size=8, prob=.5, lower.tail=TRUE)
ppois(9, 5, lower.tail = FALSE)
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(0.95)
pnorm(30+z, mean=30, lower.tail=FALSE)
pnorm(30+z, mean=32, lower.tail=FALSE)
pnorm(30+z, mean=32, sd=1, lower.tail=FALSE)
pnorm(30+z, mean=32, sd=2, lower.tail=FALSE)
pnorm(30+z*2, mean=32, sd=2, lower.tail=FALSE)
power.t.test(n = 16, delta = 2 / 4, sd=1, type =
| "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt =
| "one.sided")$n
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, n=26, sd=1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n=27, sd=1, type = "one.sample", alt = "one.sided")$delta
install.packages("devtools")
new_lesson("Introduction on data science", "IoT Lab course")
library(swirlify)
devtools::install_github(c("swirldev/swirl", "swirldev/swirlify"))
library(swirlify)
new_lesson("Introduction on data science", "IoT Lab course")
swirl()
library(swirl)
swirl()
install_from_swirl("R Programming")
install_from_swirl("Data Analysis")
install_from_swirl("Regression Models")
install.packages("UsingR")
?I
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
weighted.mean(x, w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
lm(y~0+x)
xx <- x - mean(x)
yy <- y - mean(y)
lm(yy~xx)
?lm
lm(y~x-1)
lm(y~x-0)
lm(y~x+0)
data("mtcars")
regr_line <- lm(mpg ~ wt, mtcars)
lm(mpg ~ wt, mtcars)
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline,
| lwd=3, col='red')
abline(regrline, lwd=3, col='red')
summary(regrline)
load("~/R-workspace/IoT_Introduction/R-sources/examples.RData")
data <- rbind(data1, data2, data3, data4, data5, data6)
names(data) <- c("Timestamp", "Board", "Temp", "TempObj", "X", "Y", "Z", "RSSI", "Button1", "Button2")
data$Timestamp <- as.POSIXct(data$Timestamp/1000,origin = "1970-01-01",tz = "CET")
data$Hour <-  as.POSIXlt(data$Timestamp)$hour
summary(data)
ggplot(data=data, aes(x=Timestamp)) +
geom_line(aes(y=X, color="a")) +
geom_line(aes(y=Y, color="b")) +
geom_line(aes(y=Z, color="c")) +
facet_grid( ~ Board )
library(ggplot2)
ggplot(data=data, aes(x=Timestamp)) +
geom_line(aes(y=X, color="a")) +
geom_line(aes(y=Y, color="b")) +
geom_line(aes(y=Z, color="c")) +
facet_grid( ~ Board )
ggplot(data=data, aes(TempObj-Temp)) +
geom_histogram() +
facet_grid(Hour ~ Board)
ggplot(data=data, aes(TempObj)) +
geom_histogram() +
facet_grid(Hour ~ Board)
ggplot(data=data, aes(Temp)) +
geom_histogram() +
facet_grid(Hour ~ Board)
ggplot(data=data, aes(RSSI)) +
geom_histogram() +
facet_grid(Hour ~ Board)
ggplot(data=data, aes(x=Timestamp, y=TempObj)) +
geom_line(aes(y=Temp, color="a")) +
geom_line(aes(y=TempObj, color="b")) +
geom_smooth(method="lm",col=1,size=2) +
facet_grid( ~ Board )
ggplot(data=data, aes(x=Timestamp, y=RSSI)) +
geom_line(aes(y=RSSI, color="a")) +
geom_smooth(method="lm",col=1,size=2) +
facet_grid( ~ Board )
load("~/R-workspace/IoT_Introduction/R-sources/examples.RData")
View(data)
setwd("~/R-workspace/7-Regression-Models")
data(diamond)
library(ggplot2)
newx = data.frame(x = seq(min(x), max(x), length = 100))
p1 = data.frame(predict(fit, newdata= newx,interval = ("confidence")))
p2 = data.frame(predict(fit, newdata = newx,interval = ("prediction")))
p1$interval = "confidence"
p2$interval = "prediction"
p1$x = newx$x
library(UsingR);
data(diamond)
summarize(diamonds)
library(ggplot2)
newx = data.frame(x = seq(min(x), max(x), length = 100))
source('~/R-workspace/7-Regression-Models/test code.R')
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
#Give a P-value for the two sided hypothesis test of whether beta-1 from a linear regression model is 0 or not.
fit <- lm(y ~ x)
lm(y ~ x)
fit <- lm(y ~ x)
summary(fit)
e <- resid(fit)
sqe <- e*e
res.var <- sum(sqe) / (length(e) - 2)
sqrt(res.var)
data(mtcars)
attach(mtcars)
fit <- lm(mpg ~ wt, mtcars)
summary(fit)
exp <- fit$coefficients[1] + mean(wt) * fit$coefficients[2]
exp <- fit$coefficients[1] + mean(wt) * fit$coefficients[2]
summry(exp)
summary(exp)
exp - 2 * 0.5591 # calculate
?mtcars
summary(fit)
fit[[1]][1] + 3 * fit[[1]][2]
summary(fit)
exp - 2 * fit[[2]][2] # calculate like mean +/- tquantile (around 2) * estimate standard error
fit$coefficients
?predict
predict(fit,data.frame(x=3)) #, interval="prediction") #x=3 because is 3000/1000
predict(fit, data.frame(x=3), interval="prediction") #x=3 because is 3000/1000
fit <- lm(mpg ~ wt, mtcars)
summary(fit)
predict(fit, data.frame(x=3), interval="prediction") #x=3 because is 3000/1000
exp <- fit$coefficients[1] + mean(wt) * fit$coefficients[2] # calculate value (mean)
exp - 2 * fit[[2]][2] # calculate like mean +/- tquantile (around 2) * estimate standard error
predict(fit_car, newdata = data.frame(x = mean(x)), interval = ("confidence"))
predict(fit, newdata = data.frame(x = mean(x)), interval = ("confidence"))
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
data(mtcars)
attach(mtcars)
fit <- lm(mpg ~ wt, mtcars)
summary(fit)
exp <- fit$coefficients[1] + mean(wt) * fit$coefficients[2] # calculate value (mean)
exp - 2 * fit[[2]][2] # calculate like mean +/- tquantile (around 2) * estimate standard error
#or
predict(fit, newdata = data.frame(x = mean(x)), interval = ("confidence"))
predict(fit, newdata = data.frame(x = mean(mtcars$wt)), interval = ("confidence"))
data(mtcars)
attach(mtcars)
fit <- lm(mpg ~ wt, mtcars)
summary(fit)
exp <- fit$coefficients[1] + mean(wt) * fit$coefficients[2] # calculate value (mean)
exp - 2 * fit[[2]][2] # calculate like mean +/- tquantile (around 2) * estimate standard error
#or
predict(fit, newdata = data.frame(x = mean(mtcars$wt)), interval = ("confidence"))
data(mtcars)
y <- mtcars$mpg
x <- mtcars$wt
fit_car <- lm(y ~ x)
predict(fit_car, newdata = data.frame(x = mean(x)), interval = ("confidence"))
predict(fit, newdata = data.frame(x = mean(mtcars$wt)), interval = ("confidence"))
data(mtcars)
y <- mtcars$mpg
x <- mtcars$wt
fit_car <- lm(y ~ x)
predict(fit_car, newdata = data.frame(x = mean(x)), interval = ("confidence"))
predict(fit_car, newdata = data.frame(x = 3), interval = ("prediction"))
fit_car2 <- lm(y ~ I(x/2))
sumCoef2 <- coef(summary(fit_car2))
(sumCoef2[2,1] + c(-1, 1) * qt(.975, df = fit_car2$df) * sumCoef2[2, 2])
2 * (fit$coefficients[2] - 2 * 0.5591)
setwd("~/R-workspace/IoT_Introduction/Slides")
- Bullet 2
