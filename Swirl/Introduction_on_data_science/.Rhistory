pbinom(6,size = 8, prob = 0.5, lower.tail = FALSE)
pbinom(6,size = 8, prob = 0.5, lower.tail = FALSE)
6/8
swirl()
dice_sqr
ex2_fair <- sum(dice_sqr*dice_fair)
ex2_fair <- ex2_fair -( 3.5^2)
ex2_fair -( 3.5^2)
ex2_fair-3.5^2
sum(dice_sqr*dice_high) - edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
sd(apply(matrix(rpois(10,4),1),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
0.94208
pbinom(2,size=5,prob=.8,lower.tail=FALSE)
qnorm(0.10)
0
qnorm(0.975, mean = 3, sd = 2)
1.96 * 2 +3
pnorm(1200, mean = 1020, sd = 50)
pnorm(1200,mean=1020,sd=50,lower.tail=FALSE)
pnorm((1200-1020)/50,lower.tail=FALSE)
qnorm(.75,mean=1020,sd=50)
pnorm(qnorm(.53))
qnorm(pnorm(.53))
ppois(3,2.5 * 4)
pbinom(5,1000,.01)
ppois(5,1000*.01)
library(swirl)
install.packages("libpng")
install.packages("png")
install.packages("curl")
library(swirl)
library(swirl)
swirl()
coinPlot(10)
coinPlot(10000)
qnorm(0.95)
0.6+c(-1,1)*qnorm(.975)*sqrt(0.6(1-0.6)/100)
.6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
binom.test(60,100)$conf.int
mywald(.2)
ACCompar(20)
lamb <- 5/94.32
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5, 94.32)
poisson.test(5, 94.32)$conf
qt(0.975, df=9-1)
6/2.3
sqrt((0.68+0.6)/2)
(0.68+0.6)/2
sqrt(0.64)
qt(0.975, df=18)
(2/10)^2
(2/10)^(1/2)
2.1*0.8*0.45
sqrt ( ((9-1)*(1.8)^2+(9-1)*(1.5)^2)) / (9+9-2) )
sqrt ( ((9-1)*(1.8)^2+(9-1)*(1.5)^2) / (9+9-2) )
(2/9)^(1/2)
qt(0.95, df=16)
1.745*1.657*0.471
subject <- c(1,2,3,4,5)
baseline <- c(140,138,150,148,135)
week2 <- c(132,135,151,146,130)
examinations <- data.frame(subject, baseline, week2)
examinations
test <- t.test(x = examinations$baseline, y = examinations$week2, alt = "two.sided", paired = TRUE)
pval <- test$p.value
round(pval,3)
#2
n <- 9
μ <- 1100
σ <- 30
quantile = 0.975 # is 95% with 2.5% on both sides of the range
confidenceInterval = μ + c(-1, 1) * qt(quantile, df=n-1) * σ / sqrt(n)
confidenceInterval
n <- 9
mean <- 1100
variance <- 30
quantile = 0.975 # is 95% with 2.5% on both sides of the range
confidenceInterval = mean + c(-1, 1) * qt(quantile, df=n-1) * variance / sqrt(n)
confidenceInterval
n <- 4
x <- 3
test <- binom.test(x=x, n=n, alt="greater")
round(test$p.value,2)
rate <- 1/100
errors <- 10
days <- 1787
test <-  poisson.test(errors, T = days, r = rate, alt="less")
round(test$p.value,2)
n <- 100 #subject
μ <- 0.01# m^3 brain volume loss mean
σ <- 0.04# m^3 brain volume loss std. dev.
p <- 0.05 # sign level
pow <- power.t.test(n=n, delta=μ, sd=σ , sig.level=p, type="one.sample", alt="one.sided")$power
round(pow, 2)
#8
μ <- 0.01# m^3 brain volume loss mean
σ <- 0.04# m^3 brain volume loss std. dev.
p <- 0.05 # sign level
pow <- 0.9 #power
n <- power.t.test(power=pow, delta=μ, sd=σ , sig.level=p, type="one.sample", alt="one.sided")$n
ceiling(n/10)*10
geom_density(colour="blue", size=1)
ggplot(data = simulated_means, aes(x = means)) +
geom_density(colour="green") +
stat_function(fun = dnorm, arg = list(mean = theoretical_mu , sd = sqrt(theoretical_variance)), colour = "red") +
geom_vline(xintercept = theoretical_mu, colour="red") +
stat_function(fun = dnorm, arg = list(mean = simulated_mu , sd = sqrt(simulated_variance)), colour = "blue") +
geom_vline(xintercept = simulated_mu, colour="blue") +
scale_colour_manual(name="Legend", values = c("a" = "black", "b" = "red", "c" = "blue")) +
scale_linetype_manual(name="Legend", values = c("a" = "dashed", "b" = "dotted", "c" = "dotted")) +
theme(legend.position = "bottom") +
scale_color_manual(name = "Year", # or name = element_blank()
labels = c(1940, 1960),
values = colors)
library(ggplot2)
ggplot(data = simulated_means, aes(x = means)) +
geom_density(colour="green") +
stat_function(fun = dnorm, arg = list(mean = theoretical_mu , sd = sqrt(theoretical_variance)), colour = "red") +
geom_vline(xintercept = theoretical_mu, colour="red") +
stat_function(fun = dnorm, arg = list(mean = simulated_mu , sd = sqrt(simulated_variance)), colour = "blue") +
geom_vline(xintercept = simulated_mu, colour="blue") +
scale_colour_manual(name="Legend", values = c("a" = "black", "b" = "red", "c" = "blue")) +
scale_linetype_manual(name="Legend", values = c("a" = "dashed", "b" = "dotted", "c" = "dotted")) +
theme(legend.position = "bottom") +
scale_color_manual(name = "Year", # or name = element_blank()
labels = c(1940, 1960),
values = colors)
library(ggplot2)
set.seed(10151)
```
In the first step we will create a 1000 test populated with 40 exponential samples each one. In another way we are building a matrix with 1000 rows and 40 columns filled with data extracted with a exponential distribution with parameter lamba = 0.2. The exponential distribution can be simulated in R with rexp(n, lambda) where lambda is the rate parameter.
```{r}
# Set simulation constants:
lambda <- 0.2
n      <- 40
n_test <- 1000
# Generate a n x n_test matrix
simulated_distributions <- matrix(data = rexp(n * n_test, lambda), nrow = n_test)
```
We can calculate our staticstic (mean) for each row, the result is a new matrix with 1000 row and 1 column.
```{r}
# Calculate means
simulated_means <- data.frame(means=apply(simulated_distributions, 1, mean))
```
If we plot the histogram of density of the means we obtain the following chart.
```{r echo=FALSE}
# Plot the means
ggplot(data = simulated_means, aes(x = means)) +
geom_histogram(aes(y = ..density..), color="black", fill="lightblue")
```
# Sample Mean versus Theoretical Mean
As we know from theory the mean of exponential distribution is 1/lambda, the sample mean we can calculate using the `mean()` function in R.
```{r}
# Calculate means
theoretical_mu <- 1/lambda
theoretical_mu
simulated_mu <- mean(simulated_means$means)
simulated_mu
```
Theoretical mean had value `r theoretical_mu`, sample mean has value  `r simulated_mu` so the difference is only `r theoretical_mu - simulated_mu`.
# Sample Variance versus Theoretical Variance
As we know from theory the variance of exponential distribution is 1/lambda, the sample variance we can calculate using the `var()` function in R.
```{r}
# Calculate variance
theoretical_variance <- 1/((lambda^2)*n)
theoretical_variance
simulated_variance <- var(simulated_means$means)
simulated_variance
```
Theoretical variance had value `r theoretical_variance`, sample variance has value  `r simulated_variance` so the difference is only `r theoretical_variance - simulated_variance`.
# Distribution
Via figures and text, explain how one can tell the distribution is approximately normal.
```{r echo=FALSE}
# Plot the means
ggplot(data = simulated_means, aes(x = means)) +
geom_density(colour="green") +
stat_function(fun = dnorm, arg = list(mean = theoretical_mu , sd = sqrt(theoretical_variance)), colour = "red") +
geom_vline(xintercept = theoretical_mu, colour="red") +
stat_function(fun = dnorm, arg = list(mean = simulated_mu , sd = sqrt(simulated_variance)), colour = "blue") +
geom_vline(xintercept = simulated_mu, colour="blue") +
scale_colour_manual(name="Legend", values = c("a" = "black", "b" = "red", "c" = "blue")) +
scale_linetype_manual(name="Legend", values = c("a" = "dashed", "b" = "dotted", "c" = "dotted")) +
theme(legend.position = "bottom") +
scale_color_manual(name = "Year", # or name = element_blank()
labels = c(1940, 1960),
values = colors)
ggplot(data = simulated_means, aes(x = means)) +
geom_histogram(aes(y = ..density..), color="black", fill="lightblue") +
geom_density(colour="green") +
stat_function(fun = dnorm, arg = list(mean = theoretical_mu , sd = sqrt(theoretical_variance)), colour="red") +
geom_vline(xintercept = theoretical_mu, colour="red") +
stat_function(fun = dnorm, arg = list(mean = simulated_mu , sd = sqrt(simulated_variance)), colour = "blue") +
geom_vline(xintercept = simulated_mu, colour="blue")
ggplot(data = simulated_means, aes(x = means)) +
geom_histogram(aes(y = ..density..), aes(color="black"), fill="lightblue") +
geom_density(colour="green") +
stat_function(fun = dnorm, arg = list(mean = theoretical_mu , sd = sqrt(theoretical_variance)), colour="red") +
geom_vline(xintercept = theoretical_mu, colour="red") +
stat_function(fun = dnorm, arg = list(mean = simulated_mu , sd = sqrt(simulated_variance)), colour = "blue") +
geom_vline(xintercept = simulated_mu, colour="blue")
ggplot(data = simulated_means, aes(x = means)) +
geom_histogram(aes(y = ..density..), aes(color="black"), fill="lightblue")
ggplot(data = simulated_means, aes(x = means)) +
geom_histogram(aes(y = ..density.., color="black"), color="black", fill="lightblue") +
geom_density(colour="green") +
stat_function(fun = dnorm, arg = list(mean = theoretical_mu , sd = sqrt(theoretical_variance)), colour="red") +
geom_vline(xintercept = theoretical_mu, colour="red") +
stat_function(fun = dnorm, arg = list(mean = simulated_mu , sd = sqrt(simulated_variance)), colour = "blue") +
geom_vline(xintercept = simulated_mu, colour="blue")
ggplot(data = simulated_means, aes(x = means)) +
geom_histogram(aes(y = ..density.., color="black"), color="black", fill="lightblue") +
geom_density(colour="green") +
stat_function(fun = dnorm, arg = list(mean = theoretical_mu , sd = sqrt(theoretical_variance)), colour="red") +
geom_vline(xintercept = theoretical_mu, colour="red") +
stat_function(fun = dnorm, arg = list(mean = simulated_mu , sd = sqrt(simulated_variance)), colour = "blue") +
geom_vline(xintercept = simulated_mu, colour="blue") +
theme(legend.position="top")
---
theme(legend.position="bottom", legend.text=element_text(size=10) )
ggplot(data = simulated_means, aes(x = means)) +
library(datasets)
library(ggplot2)
library(datasets)
library(ggplot2)
ggplot(data=ToothGrowth, aes(x=as.factor(dose), y=len, fill=supp)) +
geom_bar(stat="identity",) +
facet_grid(. ~ supp) +
xlab("Dose in miligrams") +
ylab("Tooth length") +
guides(fill=guide_legend(title="Supplement type"))
ToothGrowth
ggplot(data, aes(x = dose, y = len)) + geom_boxplot(aes(fill = dose))
ggplot(data, aes(x = as.factor(dose), y = len)) + geom_boxplot(aes(fill = as.factor(dose)))
data <- ToothGrowth
data$dose <- factor(data$dose)
levels(data$supp) <- c("Orange Juice", "Ascorbic Acid")
str(data)
summary(data)
# Dosage testing: 0.5 mg vs 1 mg.
data_05_1 <- subset(data, dose %in% c(0.5,1))
t.test(len ~ dose, paired=F, var.equal=F, data=data_05_1)
# Dosage testing: 1 mg vs 2 mg.
data_1_2 <- subset(data, dose %in% c(1,2))
t.test(len ~ dose, paired=F, var.equal=F, data=data_1_2)
# Delivery method testing
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==0.5,])
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==1,])
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==2,])
t.test(len ~ supp, paired=F, var.equal=F, data=data)
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==0.5,])
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==1,])
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose==2,])
t.test(len ~ supp, paired=F, var.equal=F, data=data)
?ToothGrowth
View(data_1_2)
View(data_05_1)
View(data)
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
library(datasets)
library(ggplot2)
#ToothGrowth$supp <- factor(ToothGrowth$supp)
levels(ToothGrowth$supp) <- c("Orange Juice", "Ascorbic Acid")
ToothGrowth$dose <- factor(ToothGrowth$dose)
ggplot(data=ToothGrowth, aes(x=dose, y=len, fill=supp)) +
geom_bar(stat="identity",) +
facet_grid(. ~ supp) +
labs(title="Means Histogram", x="Dose [mg]", y="Tooth length")
guides(fill=guide_legend(title="Supplement type"))
str(data)
summary(data)
# Dosage testing: 0.5 mg vs 1 mg.
data_05_1 <- subset(ToothGrowth, dose %in% c(0.5,1))
t.test(len ~ dose, paired=F, var.equal=F, data=data_05_1)
# Dosage testing: 1 mg vs 2 mg.
data_1_2 <- subset(ToothGrowth, dose %in% c(1,2))
t.test(len ~ dose, paired=F, var.equal=F, data=data_1_2)
# Delivery method testing
t.test(len ~ supp, paired=F, var.equal=F, data=ToothGrowth[ToothGrowth$dose==0.5,])
t.test(len ~ supp, paired=F, var.equal=F, data=ToothGrowth[ToothGrowth$dose==1,])
t.test(len ~ supp, paired=F, var.equal=F, data=ToothGrowth[ToothGrowth$dose==2,])
t.test(len ~ supp, paired=F, var.equal=F, data=ToothGrowth)
```
library(datasets)
library(datasets)
library(ggplot2)
#ToothGrowth$supp <- factor(ToothGrowth$supp)
levels(ToothGrowth$supp) <- c("Orange Juice", "Ascorbic Acid")
ToothGrowth$dose <- factor(ToothGrowth$dose)
ggplot(data=ToothGrowth, aes(x=dose, y=len, fill=supp)) +
geom_bar(stat="identity",) +
facet_grid(. ~ supp) +
labs(title="Means Histogram", x="Dose [mg]", y="Tooth length")
guides(fill=guide_legend(title="Supplement type"))
# Dose transformation to factor and data peek:
str(data)
summary(data)
levels(ToothGrowth$supp)
library(datasets)
library(ggplot2)
#ToothGrowth$supp <- factor(ToothGrowth$supp)
library(datasets)
levels(ToothGrowth$supp)
library(datasets)
library(ggplot2)
#ToothGrowth$supp <- factor(ToothGrowth$supp)
levels(ToothGrowth$supp)
levels(ToothGrowth$supp) <- c("Orange Juice", "Ascorbic Acid")
ToothGrowth$dose <- factor(ToothGrowth$dose)
View(ToothGrowth)
ggplot(data=ToothGrowth, aes(x=dose, y=len, fill=supp)) +
geom_bar(stat="identity",) +
facet_grid(. ~ supp) +
labs(title="Means Histogram", x="Dose [mg]", y="Tooth length")+
guides(fill=guide_legend(title="Supplement type"))
boxplot(len ~ dose, data = ToothGrowth,
boxwex = 0.25, at = 1:3 - 0.2,
subset = supp == "VC", col = "yellow",
main = "Guinea Pigs' Tooth Growth",
xlab = "Vitamin C dose mg",
ylab = "tooth length",
xlim = c(0.5, 3.5), ylim = c(0, 35), yaxs = "i")
boxplot(len ~ dose, data = ToothGrowth, add = TRUE,
boxwex = 0.25, at = 1:3 + 0.2,
subset = supp == "OJ", col = "orange")
legend(2, 9, c("Ascorbic acid", "Orange juice"),
fill = c("yellow", "orange"))
boxplot(len ~ dose, data = ToothGrowth,
boxwex = 0.25, at = 1:3 - 0.2,
subset = supp == "Ascorbic Acid", col = "yellow",
main = "Guinea Pigs' Tooth Growth",
xlab = "Vitamin C dose mg",
ylab = "tooth length",
xlim = c(0.5, 3.5), ylim = c(0, 35), yaxs = "i")
boxplot(len ~ dose, data = ToothGrowth, add = TRUE,
boxwex = 0.25, at = 1:3 + 0.2,
subset = supp == "Orange Juice", col = "orange")
legend(2, 9, c("Ascorbic acid", "Orange juice"),
fill = c("yellow", "orange"))
ggplot(data=ToothGrowth, aes(x = supp, y = len)) +
ggtitle("ToothGrowth data: length vs dose, given type of supplement") +
labs(x = "supplement type", y = "tooth length (mm)") +
geom_boxplot(aes(fill = dose))
ggplot(data=ToothGrowth, aes(x = dose, y = len)) +
ggtitle("ToothGrowth data: length vs dose, given type of supplement") +
labs(x = "supplement type", y = "tooth length (mm)") +
geom_boxplot(aes(fill = dose))
geom_boxplot(aes(fill = supp))
ggplot(data=ToothGrowth, aes(x = dose, y = len)) +
ggtitle("ToothGrowth data: length vs dose, given type of supplement") +
labs(x = "supplement type", y = "tooth length (mm)") +
geom_boxplot(aes(fill = supp))
ggplot(data=ToothGrowth, aes(x = dose, y = len)) +
ggtitle("ToothGrowth data: length vs dose, given type of supplement") +
labs(x = "supplement type", y = "tooth length (mm)") +
geom_boxplot(aes(fill = supp)) +
facet_grid(. ~ supp)
ggplot(data=ToothGrowth, aes(x = dose, y = len)) +
ggtitle("ToothGrowth data: length vs dose, given type of supplement") +
labs(x = "supplement type", y = "tooth length (mm)") +
geom_boxplot(aes(fill = dose)) +
facet_grid(. ~ supp)
ggplot(data=ToothGrowth, aes(x = dose, y = len)) +
labs(title="ToothGrowth data", x="Dose [mg]", y = "Tooth length") +
geom_boxplot(aes(fill=dose)) +
facet_grid(. ~ supp) +
theme(legend.position="none")
ggplot(data=ToothGrowth, aes(x = dose, y = len)) +
labs(title="ToothGrowth data", x="Dose [mg]", y = "Tooth length") +
geom_boxplot(aes(fill=dose)) +
facet_grid(. ~ supp) +
geom_smooth(method = "lm", se=FALSE, color="black", formula=dose~len) +
theme(legend.position="none")
ggplot(data=ToothGrowth, aes(x = dose, y = len)) +
labs(title="ToothGrowth data", x="Dose [mg]", y = "Tooth length") +
geom_boxplot(aes(fill=dose)) +
facet_grid(. ~ supp) +
geom_smooth(method = "lm", se=FALSE, color="black", formula=ToothGrowth$dose~ToothGrowth$len) +
theme(legend.position="none")
ggplot(data=ToothGrowth, aes(x = dose, y = len)) +
labs(title="ToothGrowth data", x="Dose [mg]", y = "Tooth length") +
geom_boxplot(aes(fill=dose)) +
facet_grid(. ~ supp) +
geom_smooth(method = "lm", se=FALSE, color="black", aes(group=1)) +
theme(legend.position="none")
library(swirl)
swirl()
pt(q=2.5, df=15, lower.tail=FALSE)
qnorm(0.975)
qnorm(0.95)
qnorm(0.99)
pnorm(2)
pnorm(2 lower.tail = FALSE)
pnorm(2, lower.tail = FALSE)
mybin
pbinom(6, size=8, prob=.5, and lower.tail=FALSE)
pbinom(6, size=8, prob=.5, lower.tail=FALSE)
pbinom(7, size=8, prob=.5, lower.tail=TRUE)
ppois(9, 5, lower.tail = FALSE)
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(0.95)
pnorm(30+z, mean=30, lower.tail=FALSE)
pnorm(30+z, mean=32, lower.tail=FALSE)
pnorm(30+z, mean=32, sd=1, lower.tail=FALSE)
pnorm(30+z, mean=32, sd=2, lower.tail=FALSE)
pnorm(30+z*2, mean=32, sd=2, lower.tail=FALSE)
power.t.test(n = 16, delta = 2 / 4, sd=1, type =
| "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt =
| "one.sided")$n
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, n=26, sd=1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n=27, sd=1, type = "one.sample", alt = "one.sided")$delta
install.packages("devtools")
new_lesson("Introduction on data science", "IoT Lab course")
library(swirlify)
devtools::install_github(c("swirldev/swirl", "swirldev/swirlify"))
library(swirlify)
new_lesson("Introduction on data science", "IoT Lab course")
swirl()
library(swirl)
swirl()
install_from_swirl("R Programming")
install_from_swirl("Data Analysis")
install_from_swirl("Regression Models")
setwd("~/R-workspace/IoT_Lab_course/Introduction_on_data_science")
library(swirlify)
set_lesson("./lesson.yaml")
paste0(sample(tt, sample(seq(400), 1), replace=TRUE), collapse="")
paste0(sample( c(rep(letters, 3), seq(100)), sample(seq(400), 1), replace=TRUE), collapse="")
paste0(sample( c(rep(letters, 3), seq(100)), sample(seq(400), 1), replace=TRUE), collapse="")
paste0(sample( c(rep(letters, 3), seq(100)), sample(seq(400), 1), replace=TRUE), collapse="")
paste0(sample( c(rep(letters, 3), seq(100)), sample(seq(400), 1), replace=TRUE), collapse="")
tt <- c(rep(letters, 3), seq(100))
ss <- lapply(1:2, function(i) {
paste0(sample(tt, sample(seq(400), 1), replace=TRUE), collapse="")
})
ss <- lapply(1:2, function(i) {
paste0(sample(tt, sample(seq(400), 1), replace=TRUE), collapse="")
})
ss <- lapply(1:2, function(i) {
paste0(sample(tt, sample(seq(400), 1), replace=TRUE), collapse="")
})
library(swirl)
swirl()
install_from_swirl("Statistical Inference")
install_from_swirl("Getting and Cleaning Data")
swirl()
head(pValues)
sum(pValues < 0.05)
sum(p.adjust(pValues,method="bonferroni") < 0.05)
sum(p.adjust(pValues,method="BH") < 0.05)
tail(trueStatu
s)
tail(trueStatus)
table(pValues2 < 0.05, trueStatus)
244/500
24/500
table(p.adjust(pValues2,method=\"bonferroni\") < 0.05, trueStatus)
table(p.adjust(pValues2,method=\"bonferroni\") < 0.05, trueStatus)
table(p.adjust(pValues2,method="bonferroni") < 0.05, trueStatus)
table(p.adjust(pValues2,method="BH") < 0.05, trueStatus)
3.5
print(g2)
head(sh)
nh
median(resampledMedians)
median(sh)
sam <- sample(fh,nh*B,replace=TRUE)
resam <- matrix(sam,B,nh)
meds <- apply(resam,1,median)
median(meds)-median(fh)
sd(meds)
sd(resampledMedians)
quantile(resampledMedians,c(.025,.975))
quantile(meds,c(.025,.975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCcounts
group
testStat()
testStat
obs <- testStat(BCcounts,group)
obs
mean(Bdata$count)-mean(Cdata$count)
sample(group)
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
mean(perms>obs)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts, sample(group)))
testStat(DEcounts,group)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts, sample(group)))
